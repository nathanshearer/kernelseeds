#!/usr/bin/env bash

NAME="Kernel Seeds"
CODENAME="kernelseeds"
COPYRIGHT="Copyright (C) 2013 Nathan Shearer"
LICENSE="GNU General Public License 2.0"
VERSION="2.0.0.0"

function kernelseeds_apply_seed_path
{
	local KERNEL_SOURCE_PATH="$1"
	local SEED_PATH="$2"
	
	echo "Applying options from \"$SEED_PATH\""
	
	cd "$KERNEL_SOURCE_PATH"
	
	find "$SEED_PATH" -name options -print0 | xargs -0 cat >> "$TMP"/seed.config
	touch "$TMP"/new.config
	for OPTION in $(cat "$TMP"/seed.config); do
		# if the option is already set
		if grep "^"$(echo "$OPTION" | sed -r 's/^(CONFIG.*?)=.*$/\1/') "$KERNEL_SOURCE_PATH"/.config >/dev/null; then
			if $OVERRIDE; then
				echo "$OPTION"
				echo "$OPTION" >> "$TMP"/new.config
			fi
		else
			# the option is not set, so set it
			echo "$OPTION"
			echo "$OPTION" >> "$TMP"/new.config
		fi
	done
	cat "$TMP"/new.config >> "$KERNEL_SOURCE_PATH"/.config

	make olddefconfig
}

# The kernel config has menu options which hide or unhide additional options
# The menuconfig options do not add any code to the kernel
# Disabled menuconfig options prevents compilation of subsidiary modules
# This function searches for and enables all menuconfig options
function kernelseeds_enable_all_menuconfig
{
	local KERNEL_SOURCE_PATH="$1"
	
	echo "Enabling all menu options which unhide additional options"
	
	cd "$KERNEL_SOURCE_PATH"
	for OPTION in $(find "$KERNEL_SOURCE_PATH" -name Kconfig -exec grep menuconfig {} \; | sed -e 's/menuconfig //'); do
		echo "CONFIG_$OPTION=y" >>.config
	done
	kernelseeds_quiet make olddefconfig
}

# Search for and enable all modules which do not override existing options
function kernelseeds_enable_all_modules
{
	local KERNEL_SOURCE_PATH="$1" 

	echo "Enabling all modules which do not override existing options"

	if [ -f .config ]; then
		echo "Backing up original .config to .config.backup"
		cp -f .config .config.backup
	else
		kernelseeds_defconfig "$KERNEL_SOURCE_PATH"
	fi

	echo -n "Generating allmodconfig..."
	kernelseeds_quiet make clean mrproper
	kernelseeds_quiet make allmodconfig
	mv -f .config .config.allmodconfig
	cp -f .config.backup .config
	echo " done."
	
	cd "$KERNEL_SOURCE_PATH"
	cp -f .config .config.enable_all_modules
	
	local MODULES_ENABLED=0
	local MODULES_SKIPPED=0
	local MODULES_PRUNED=0
	local MODULES_TOTAL=0
	
	while read -r ALLMODCONFIG_LINE; do
		# only process modules options
		if echo "$ALLMODCONFIG_LINE" | grep -E -q '^[^#].+=m$'; then
			OPTION=$(echo -n "$ALLMODCONFIG_LINE" | sed -r 's/=m$//')
			
			# backup config
			mv -f .config .config.enable_all_modules
			grep -E "^[^#].*" .config.enable_all_modules >.config
			
			echo "$OPTION=m" >>.config
			if make olddefconfig 2>&1 | grep -q override; then
				# skip this option due to override
				cp -f .config.enable_all_modules .config
				echo "Skipped: $OPTION"
				MODULES_SKIPPED=$(($MODULES_SKIPPED+1))
			else
				if grep -E -q "$OPTION=m" .config; then
					# this module was enabled without causing an override
					echo "Enabled: $OPTION"
					MODULES_ENABLED=$(($MODULES_ENABLED+1))
				else
					# this module was not enabled by make olddefconfig so skip it
					echo "Pruned: $OPTION"
					MODULES_PRUNED=$(($MODULES_PRUNED+1))
				fi
			fi
			MODULES_TOTAL=$(($MODULES_TOTAL+1))
			#echo "Enabled: $MODULES_ENABLED"
			#echo "Skipped: $MODULES_SKIPPED"
			#echo "Pruned: $MODULES_PRUNED"
			#echo "Total: $MODULES_TOTAL"
		fi
	done <.config.allmodconfig
}

function kernelseeds_help
{
	#     01234567890123456789012345678901234567890123456789012345678901234567890123456789
	echo "Description:"
	echo "  Apply a set of kernel options to a new or existing kernel configuration."
	echo
	echo "Usage:"
	echo "  kernelseeds [options]"
	echo
	echo "Options:"
	echo "  --apply-seed-path path/to/options"
	echo "    Apply the options at the provided path."
	echo "  --enable-all-menuconfig"
	echo "    Enable all menu options which unhide additional options."
	echo "  --enable-all-modules"
	echo "    Enable all non-overriding modules."
	echo "  -h, --help"
	echo "    Display this help message and exit."
	echo "  --tmpfs"
	echo "    Use tmpfs to improve performance of /tmp."
	echo
	echo "Example:"
	echo "  # cd /usr/src/linux"
	echo "  # make mrproper"
	echo "  # kernelseeds --enable-all-menuconfig --enable-all-modules"
	echo
	echo "Version:"
	echo "  $NAME $VERSION"
	echo "  $COPYRIGHT"
	echo "  Licensed under $LICENSE"
}

# \brief Run a command and only show output if an error occurs
# \param $@ The command and its arguments
function kernelseeds_quiet
{
	local RANDOM64=$(( $RANDOM * $RANDOM * $RANDOM * $RANDOM ))
	"$@" >>/tmp/.quiet.$RANDOM64 2>/tmp/.quiet.$RANDOM64
	local STATUS="$?"
	if [ "$STATUS" -ne 0 ]; then
		cat /tmp/.quiet.$RANDOM64
	fi
	rm -f /tmp/.quiet.$RANDOM64
	return "$STATUS"
}

#------------------------------------------------------------------------------
# default configuration

KERNEL_SOURCE_PATH=.
ALL_MENUCONFIG=false
ALL_MODULES=false
SEED_PATH=""
OVERRIDE=true
TMPFS=false
TMP="/tmp"

#------------------------------------------------------------------------------
# command line arguments

while [ $# -gt 0 ]; do
	case "$1" in
		"--apply-seed-path")
			SEED_PATH="$2"
			shift 2
			;;
		"--enable-all-menuconfig")
			ALL_MENUCONFIG=true
			shift
			;;
		"--enable-all-modules")
			ALL_MODULES=true
			shift
			;;
		"-h"|"--help")
			kernelseeds_help
			exit
			;;
		"--tmpfs")
			TMPFS=true
			shift
			;;
		*)
			kernelseeds_help
			exit 1
			;;
	esac
done
if [ ! -d "$KERNEL_SOURCE_PATH" ]; then
	echo "error: the kernel_source_path at \"$KERNEL_SOURCE_PATH\" is not a directory"
	exit 2
fi
if [ ! -f "$KERNEL_SOURCE_PATH/Makefile" ]; then
	echo "error: the kernel_source_path at \"$KERNEL_SOURCE_PATH\" does not appear to contain a kernel Makefile"
	exit 3
fi

#------------------------------------------------------------------------------
# prepare environment

TMP="$TMP/$CODENAME.$$"
mkdir -m 0700 -p "$TMP"
if $TMPFS; then
	mount -t tmpfs none "$TMPFS"
fi

#------------------------------------------------------------------------------
# begin execution

if [ ! -f .config ]; then
	echo -n "An existing .config file was not found. Generating a new default config..."
	kernelseeds_quiet make defconfig
	echo " done."
fi

if $ALL_MENUCONFIG; then
	kernelseeds_enable_all_menuconfig "$KERNEL_SOURCE_PATH"
fi

if $ALL_MODULES; then
	kernelseeds_enable_all_modules "$KERNEL_SOURCE_PATH"
fi

if [ "$SEED_PATH" != "" ]; then
	kernelseeds_apply_seed_path "$KERNEL_SOURCE_PATH" "$SEED_PATH"
fi

# A preallocated buffer-size of 2048 (kB) or higher is recommended for the HD-audio driver
# Device Drivers > Sound card support > Advanced Linux Sound Architecture > HD-Audio > Pre-allocated buffer size for HD-audio driver
echo 'CONFIG_SND_HDA_PREALLOC_SIZE=2048' >>.config

# Power management and ACPI options > CPU Frequency scaling > Default CPUFreq governor (performance)
echo 'CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y' >>.config

# Processor type and features > Preemption Model (Preemptible Kernel (Low-Latency Desktop))
echo 'CONFIG_PREEMPT=y' >>.config

# Disable evbug because it is autoloaded and fills the system logs
# Device Drivers > Input device support > Event debugging
echo 'CONFIG_INPUT_EVBUG=n' >>.config

# USB Attached SCSI is broken for seagate drives
# Device Drivers > USB support > USB Attached SCSI
echo 'CONFIG_USB_UAS=n' >>.config

# Google Chrome requirement
# General setup > Namespaces support > User namespace
echo 'CONFIG_USER_NS=y' >>.config

# Security options > NSA SELinux Support
echo 'CONFIG_SECURITY_SELINUX=n' >>.config

kernelseeds_quiet make olddefconfig

if $TMPFS; then
	umount "$TMP"
fi
rm -rf --one-file-system "$TMP"
