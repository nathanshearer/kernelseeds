#!/usr/bin/env bash

NAME="Kernel Seeds"
CODENAME="kernelseeds"
COPYRIGHT="Copyright (C) 2013 Nathan Shearer"
LICENSE="GNU General Public License 2.0"
VERSION="1.0.0.0"

# \brief Displays the help and exits the program
function kernelseeds_help
{
	#     01234567890123456789012345678901234567890123456789012345678901234567890123456789
	echo "Description:"
	echo "  Apply a set of kernel options to a new or existing kernel configuration."
	echo
	echo "Usage:"
	echo "  $CODENAME [options] config_seed_path kernel_source_path"
	echo
	echo "Options:"
	echo "  --override"
	echo "    All the kernel seed options are concatenated to the end of the existing"
	echo "    .config file, overriding previously set options to the new kernel seed value"
	echo "    if one is set."
	echo "  -h"
	echo "    Display this help message and exit."
	echo
	echo "Example:"
	echo "  # cd /usr/src/linux"
	echo "  # make mrproper defconfig"
	echo "  # $CODENAME --override /usr/src/kernelseeds/4.10 ."
	echo
	echo "Version:"
	echo "  $NAME $VERSION"
	echo "  $COPYRIGHT"
	echo "  Licensed under $LICENSE"
	exit
}

#------------------------------------------------------------------------------
# default configuration

OVERRIDE=false
TMP="/tmp"

#------------------------------------------------------------------------------
# command line arguments

THIS="$0"
while [ $# -gt 2 ]; do
	case "$1" in
		"-h"|"--help")
			kernelseeds_help
			;;
		"--override")
			OVERRIDE=true
			shift
			;;
		*)
			kernelseeds_help
			;;
	esac
done
if [ $# -ne 2 ]; then
	kernelseeds_help
fi
CONFIG_SEED_PATH="$1"
shift
if [ ! -d "$CONFIG_SEED_PATH" ]; then
	echo "error: the config_seed_path at \"$CONFIG_SEED_PATH\" is not a directory"
	exit 1
fi
KERNEL_SOURCE_PATH="$1"
shift
if [ ! -d "$KERNEL_SOURCE_PATH" ]; then
	echo "error: the kernel_source_path at \"$KERNEL_SOURCE_PATH\" is not a directory"
	exit 2
fi
if [ ! -f "$KERNEL_SOURCE_PATH/Makefile" ]; then
	echo "error: the kernel_source_path at \"$KERNEL_SOURCE_PATH\" does not appear to contain a kernel Makefile"
	exit 3
fi

#------------------------------------------------------------------------------
# prepare environment

TMP="$TMP/$CODENAME.$$"
mkdir -p "$TMP"

#------------------------------------------------------------------------------
# begin execution

if [ ! -f "$KERNEL_SOURCE_PATH/.config" ]; then
	echo "A .config file was not found at \"$KERNEL_SOURCE_PATH\"/.config"
	echo "Generating a new .config file with \"make defconfig\""
	pushd "$KERNEL_SOURCE_PATH"
		make defconfig
	popd
fi

find "$CONFIG_SEED_PATH" -name options -print0 | xargs -0 cat >> "$TMP"/seed.config
touch "$TMP"/new.config
for OPTION in `cat "$TMP"/seed.config`; do
	# if the option is already set
	if grep "^"`echo "$OPTION" | sed -r 's/^(CONFIG.*?)=.*$/\1/'` "$KERNEL_SOURCE_PATH"/.config >/dev/null; then
		if $OVERRIDE; then
			echo "$OPTION"
			echo "$OPTION" >> "$TMP"/new.config
		fi
	else
		# the option is not set, so set it
		echo "$OPTION"
		echo "$OPTION" >> "$TMP"/new.config
	fi
done
cat "$TMP"/new.config >> "$KERNEL_SOURCE_PATH"/.config
pushd "$KERNEL_SOURCE_PATH"
	make olddefconfig
popd

rm -rf "$TMP"
