#!/usr/bin/env bash

NAME="Kernel Seeds"
CODENAME="kernelseeds"
COPYRIGHT="Copyright (C) 2013 Nathan Shearer"
LICENSE="GNU General Public License 2.0"
VERSION="3.0.2.0"

function kernelseeds_apply_seed_path
{
	local KERNEL_SOURCE_PATH="$1"
	local SEED_PATH="$2"
	
	echo "Applying options from \"$SEED_PATH\""
	
	cd "$KERNEL_SOURCE_PATH"
	
	find "$SEED_PATH" -name options -print0 | xargs -0 cat >> "$TMP"/seed.config
	touch "$TMP"/new.config
	for OPTION in $(cat "$TMP"/seed.config); do
		# if the option is already set
		if grep "^"$(echo "$OPTION" | sed -r 's/^(CONFIG.*?)=.*$/\1/') "$KERNEL_SOURCE_PATH"/.config >/dev/null; then
			if $OVERRIDE; then
				echo "$OPTION"
				echo "$OPTION" >> "$TMP"/new.config
			fi
		else
			# the option is not set, so set it
			echo "$OPTION"
			echo "$OPTION" >> "$TMP"/new.config
		fi
	done
	cat "$TMP"/new.config >> "$KERNEL_SOURCE_PATH"/.config

	make olddefconfig
}

# The kernel config has menu options which hide or unhide additional options
# The menuconfig options do not add any code to the kernel
# Disabled menuconfig options prevents compilation of subsidiary modules
# This function searches for and enables all menuconfig options
function kernelseeds_enable_all_menuconfig
{
	local KERNEL_SOURCE_PATH="$1"
	
	echo "Enabling all menu options which unhide additional options"
	
	cd "$KERNEL_SOURCE_PATH"
	for OPTION in $(find "$KERNEL_SOURCE_PATH" -name Kconfig -exec grep menuconfig {} \; | sed -e 's/menuconfig //'); do
		if grep -E -q "^# CONFIG_$OPTION" .config; then
			echo "  Enabled: CONFIG_$OPTION"
			echo "CONFIG_$OPTION=y" >>.config
		fi
	done
	kernelseeds_quiet make olddefconfig
}

# Search for and enable all modules which do not override existing options
function kernelseeds_enable_all_modules
{
	local KERNEL_SOURCE_PATH="$1" 

	echo "Enabling all modules which do not override existing options"

	if [ -f .config ]; then
		#echo "Backing up original .config to .config.backup"
		cp -f .config .config.backup
	else
		kernelseeds_defconfig "$KERNEL_SOURCE_PATH"
	fi

	#echo -n "Generating allmodconfig..."
	kernelseeds_quiet make clean mrproper
	kernelseeds_quiet make allmodconfig
	mv -f .config .config.allmodconfig
	cp -f .config.backup .config
	#echo " done."
	
	cd "$KERNEL_SOURCE_PATH"
	cp -f .config .config.enable_all_modules
	
	local MODULES_ENABLED=0
	local MODULES_SKIPPED=0
	local MODULES_PRUNED=0
	local MODULES_TOTAL=0
	
	while read -r ALLMODCONFIG_LINE; do
		# only process modules options
		if echo "$ALLMODCONFIG_LINE" | grep -E -q '^[^#].+=m$'; then
			OPTION=$(echo -n "$ALLMODCONFIG_LINE" | sed -r 's/=m$//')
			
			# backup config
			mv -f .config .config.enable_all_modules
			grep -E "^[^#].*" .config.enable_all_modules >.config
			
			echo "$OPTION=m" >>.config
			if make olddefconfig 2>&1 | grep -q override; then
				# skip this option due to override
				cp -f .config.enable_all_modules .config
				#echo "  Skipped: $OPTION"
				MODULES_SKIPPED=$(($MODULES_SKIPPED+1))
			else
				if grep -E -q "$OPTION=m" .config; then
					# this module was enabled without causing an override
					echo "  Enabled: $OPTION"
					MODULES_ENABLED=$(($MODULES_ENABLED+1))
				else
					# this module was not enabled by make olddefconfig so skip it
					#echo "  Pruned: $OPTION"
					MODULES_PRUNED=$(($MODULES_PRUNED+1))
				fi
			fi
			MODULES_TOTAL=$(($MODULES_TOTAL+1))
			#echo "  Enabled: $MODULES_ENABLED"
			#echo "  Skipped: $MODULES_SKIPPED"
			#echo "  Pruned: $MODULES_PRUNED"
			#echo "  Total: $MODULES_TOTAL"
		fi
	done <.config.allmodconfig
	echo "  Modules Enabled: $MODULES_ENABLED"
	echo "  Modules Skipped: $MODULES_SKIPPED"
	echo "  Modules Pruned: $MODULES_PRUNED"
	echo "  Total: $MODULES_TOTAL"
}

function kernelseeds_help
{
	#     01234567890123456789012345678901234567890123456789012345678901234567890123456789
	echo "Description:"
	echo "  Apply a set of kernel options to a new or existing kernel configuration."
	echo
	echo "Usage:"
	echo "  kernelseeds [options]"
	echo
	echo "Options:"
	echo "  -a, --architecture x86"
	echo "    Change ARCH when configuring the kernel."
	echo "    Possible architectures are defined at kernel-source/arch/*:"
	echo "  --apply-seed-path path/to/options"
	echo "    Apply the options at the provided path."
	echo "  --apply-system-raspberry-pi-2"
	echo "    Apply changes to support the Raspberry Pi 2."
	echo "  --enable-all-menuconfig"
	echo "    Enable all menu options which unhide additional options."
	echo "  --enable-all-modules"
	echo "    Enable all non-overriding modules."
	echo "  -h, --help"
	echo "    Display this help message and exit."
	echo "  --tmpfs"
	echo "    Use tmpfs to improve performance of /tmp."
	echo
	echo "Example:"
	echo "  # cd /usr/src/linux"
	echo "  # make clean mrproper"
	echo "  # gzip -c -d /proc/config.gz > .config"
	echo "  # kernelseeds --enable-all-menuconfig --enable-all-modules"
	echo "  # make && make modules_install"
	echo
	echo "Example:"
	echo "  # cd /usr/src/linux-arm"
	echo "  # make clean mrproper"
	echo "  # kernelseeds -a arm --enable-all-menuconfig --enable-all-modules"
	echo "  # make && make modules_install"
	echo
	echo "Version:"
	echo "  $NAME $VERSION"
	echo "  $COPYRIGHT"
	echo "  Licensed under $LICENSE"
}

# \brief Run a command and only show output if an error occurs
# \param $@ The command and its arguments
function kernelseeds_quiet
{
	local RANDOM64=$(( $RANDOM * $RANDOM * $RANDOM * $RANDOM ))
	"$@" >>/tmp/.quiet.$RANDOM64 2>/tmp/.quiet.$RANDOM64
	local STATUS="$?"
	if [ "$STATUS" -ne 0 ]; then
		cat /tmp/.quiet.$RANDOM64
	fi
	rm -f /tmp/.quiet.$RANDOM64
	return "$STATUS"
}

#------------------------------------------------------------------------------
# default configuration

KERNEL_SOURCE_PATH=.
ALL_MENUCONFIG=false
ALL_MODULES=false
SEED_PATH=""
APPLY_SYSTEM_RASPBERRY_PI_2=false
OVERRIDE=true
TMPFS=false
TMP="/tmp"

#------------------------------------------------------------------------------
# command line arguments

while [ $# -gt 0 ]; do
	case "$1" in
		"-a"|"--architecture")
			export ARCH="$2"
			shift 2
			;;
		"--apply-system-raspberry-pi-2")
			APPLY_SYSTEM_RASPBERRY_PI_2=true
			shift
			;;
		"--apply-seed-path")
			SEED_PATH="$2"
			shift 2
			;;
		"--enable-all-menuconfig")
			ALL_MENUCONFIG=true
			shift
			;;
		"--enable-all-modules")
			ALL_MODULES=true
			shift
			;;
		"-h"|"--help")
			kernelseeds_help
			exit
			;;
		"--tmpfs")
			TMPFS=true
			shift
			;;
		*)
			kernelseeds_help
			exit 1
			;;
	esac
done
if [ ! -d "$KERNEL_SOURCE_PATH" ]; then
	echo "error: the kernel_source_path at \"$KERNEL_SOURCE_PATH\" is not a directory"
	exit 2
fi
if [ ! -f "$KERNEL_SOURCE_PATH/Makefile" ]; then
	echo "error: the kernel_source_path at \"$KERNEL_SOURCE_PATH\" does not appear to contain a kernel Makefile"
	exit 3
fi

#------------------------------------------------------------------------------
# prepare environment

TMP="$TMP/$CODENAME.$$"
mkdir -m 0700 -p "$TMP"
if $TMPFS; then
	mount -t tmpfs none "$TMP"
fi

#------------------------------------------------------------------------------
# begin execution

if [ ! -f .config ]; then
	echo -n "An existing .config file was not found. Generating a new default config..."
	kernelseeds_quiet make defconfig
	echo " done."
fi

if $ALL_MENUCONFIG; then
	kernelseeds_enable_all_menuconfig "$KERNEL_SOURCE_PATH"
fi

if [ "$SEED_PATH" != "" ]; then
	kernelseeds_apply_seed_path "$KERNEL_SOURCE_PATH" "$SEED_PATH"
fi

if $ALL_MODULES; then
	kernelseeds_enable_all_modules "$KERNEL_SOURCE_PATH"
fi

if $APPLY_SYSTEM_RASPBERRY_PI_2; then
	echo "Build in SD card support to enable booting off of SD cards"
	echo "  Device Drivers > MMC/SD/SDIO card support"
	echo 'CONFIG_MMC=y' >>.config
	echo "  Device Drivers > MMC/SD/SDIO card support > MMC block device driver"
	echo 'CONFIG_MMC_BLOCK=y' >>.config

	echo "Build in support for the Raspberry Pi SD/MMC controller"
	echo "  Device Drivers > MMC/SD/SDIO card support > Secure Digital Host Controller Interface support"
	echo 'CONFIG_MMC_SDHCI=y' >>.config
	echo "  Device Drivers > MMC/SD/SDIO card support > SDHCI platform and OF driver helper"
	echo 'MMC_SDHCI_PLTFM=y' >>.config
	echo "  Device Drivers > MMC/SD/SDIO card support > SDHCI platform support for the BCM2835 SD/MMC Controller"
	echo 'MMC_SDHCI_BCM2835=y' >>.config

	echo "Build in support for the Raspberry Pi GPU"
	echo "  Devices Drivers > Graphics support > Frame buffer Devices > Support for frame buffer devices"
	echo 'CONFIG_FB=y' >>.config
	echo "  Devices Drivers > Graphics support > Frame buffer Devices > Support for frame buffer devices > BCM2708 framebuffer support"
	echo 'CONFIG_FB_BCM2708=y' >>.config
	echo "  Devices Drivers > Graphics support > Console display driver support"
	echo 'CONFIG_FRAMEBUFFER_CONSOLE=y' >>.config

	echo "Enable support for 3D acceleration"
	echo "  Devices Drivers > Graphics support > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)"
	echo 'CONFIG_DRM=m' >>.config
	echo "  Devices Drivers > Graphics support > Broadcom VC4 Graphics"
	echo 'CONFIG_DRM_VC4=m' >>.config
	echo "Note: This driver requires that \"avoid_warnings=2\" be present in the config.txt for the firmware, to keep it from smashing the display setup."

	echo "Build in support for the Raspberry Pi Ethernet Chipset"
	echo "  Device Drivers > Network device support > USB Network Adapters > Multi-purpose USB Networking Framework > SMSC LAN95XX based USB 2.0 10/100 ethernet devices"
	echo 'CONFIG_USB_NET_SMSC95XX=y' >>.config

	echo "Disable seccomp due to compile error: \"gcc: error: unrecognized command line option ‘-m32’; did you mean ‘-mbe32’?\""
	echo "  Kernel Features             > Enable seccomp to safely compute untrusted bytecode"
	echo "  Processor type and features > Enable seccomp to safely compute untrusted bytecode"
	echo 'CONFIG_SECCOMP=n' >>.config

	kernelseeds_quiet make olddefconfig
fi

echo "Enable iptables support"
echo 'CONFIG_NETFILTER=y' >>.config
echo 'CONFIG_IP_NF_FILTER=m' >>.config
echo 'CONFIG_IP_NF_NAT=m' >>.config
echo 'CONFIG_IP_NF_TARGET_MASQUERADE=m' >>.config
echo 'CONFIG_IP_NF_TARGET_NETMAP=m' >>.config
echo 'CONFIG_IP_NF_TARGET_REDIRECT=m' >>.config

echo "Enable NFS support"
echo 'CONFIG_NFSD=m' >>.config
echo 'CONFIG_NFSD_V3=y' >>.config
echo 'CONFIG_NFSD_V3_ACL=y' >>.config
echo 'CONFIG_NFSD_V4=y' >>.config
echo 'CONFIG_NFSD_BLOCKLAYOUT=y' >>.config
echo 'CONFIG_NFSD_SCSILAYOUT=y' >>.config
echo 'CONFIG_NFSD_FLEXFILELAYOUT=y' >>.config
echo 'CONFIG_NFSD_V4_SECURITY_LABEL=y' >>.config

echo "Enable NVMe support"
echo "  Device Drivers > NVME Support > NVM Express block device"
echo 'CONFIG_BLK_DEV_NVME=y' >>.config

echo "Enable RAID support"
echo 'CONFIG_BLK_DEV_MD=y' >>.config
echo 'CONFIG_MD_LINEAR=y' >>.config
echo 'CONFIG_MD_RAID0=y' >>.config
echo 'CONFIG_MD_RAID1=y' >>.config
echo 'CONFIG_MD_RAID10=y' >>.config
echo 'CONFIG_MD_RAID456=y' >>.config

echo "Enable USB support"
echo 'CONFIG_USB_SUPPORT=y' >>.config
echo 'CONFIG_USB_XHCI_PCI=y' >>.config
echo 'CONFIG_USB_XHCI_PCI_RENESAS=y' >>.config

echo "Enable VirtIO support"
echo "  Device Drivers > Remoteproc drivers > Support for Remote Processor subsystem"
echo 'CONFIG_REMOTEPROC=y' >>.config
echo "  Device Drivers > Virtio drivers > PCI driver for virtio devices"
echo 'CONFIG_VIRTIO_PCI=y' >>.config
echo "  Device Drivers > Block devices > Virtio block driver"
echo 'CONFIG_VIRTIO_BLK=y' >>.config
echo "  Device Drivers > SCSI device support > SCSI low-level drivers > virtio-scsi support"
echo 'CONFIG_SCSI_VIRTIO=y' >>.config
echo "  Device Drivers > Network device support > Network core driver support > Virtio network driver"
echo 'CONFIG_VIRTIO_NET=y' >>.config
echo "  Device Drivers > Character devices > Hardware Random Number Generator Core support > VirtIO Random Number Generator support"
echo 'CONFIG_HW_RANDOM_VIRTIO=y' >>.config

echo "Enable audio over HDMI support"
echo "  Device Drivers > Sound card support > Advanced Linux Sound Architecture > HD-Audio > HD Audio PCI (CONFIG_SND_HDA_INTEL=y)"
echo 'CONFIG_SND_HDA_INTEL=y' >>.config
echo "  Device Drivers > Sound card support > Advanced Linux Sound Architecture > HD-Audio > Build HDMI/DisplayPort HD-audio codec support (CONFIG_SND_HDA_CODEC_HDMI=y)"
echo 'CONFIG_SND_HDA_CODEC_HDMI=y' >>.config
echo "  Device Drivers > Sound card support > Advanced Linux Sound Architecture > HD-Audio > Enable generic HD-audio codec parser (CONFIG_SND_HDA_GENERIC=y)"
echo 'CONFIG_SND_HDA_GENERIC=y' >>.config

echo "Enable VMware support"
echo "  Device Drivers > SCSI device support > SCSI low-level drivers > VMware PVSCSI driver support (VMWARE_PVSCSI=y)"
echo 'VMWARE_PVSCSI=y' >>.config
echo "  Device Drivers > Graphics support > DRM driver for VMware Virtual GPU (CONFIG_DRM_VMWGFX=y))"
echo 'CONFIG_DRM_VMWGFX=y' >>.config
echo '  Device Drivers > Graphics support > DRM driver for VMware Virtual GPU > Enable framebuffer console under vmwgfx by default (CONFIG_DRM_VMWGFX_FBCON=y)' >>.config
echo 'CONFIG_DRM_VMWGFX_FBCON=y' >>.config
echo '  Networking support > Networking options > Virtual Socket protocol (VMWARE_VMCI_VSOCKETS=m)' >>.config
echo 'VMWARE_VMCI_VSOCKETS=m' >>.config

echo "A preallocated buffer-size of 2048 (kB) or higher is recommended for the HD-audio driver"
echo "  Device Drivers > Sound card support > Advanced Linux Sound Architecture > Pre-allocated buffer size for HD-audio driver (CONFIG_SND_HDA_PREALLOC_SIZE=2048)"
echo 'CONFIG_SND_HDA_PREALLOC_SIZE=2048' >>.config

echo "Power management and ACPI options > CPU Frequency scaling > Default CPUFreq governor (performance)"
echo 'CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y' >>.config

echo "Processor type and features > Preemption Model (Preemptible Kernel (Low-Latency Desktop))"
echo 'CONFIG_PREEMPT=y' >>.config

echo "Disable evbug because it is autoloaded and fills the system logs"
echo "  Device Drivers > Input device support > Event debugging"
echo 'CONFIG_INPUT_EVBUG=n' >>.config

echo "USB Attached SCSI is broken for seagate drives"
echo "  Device Drivers > USB support > USB Attached SCSI"
echo 'CONFIG_USB_UAS=n' >>.config

echo "dev-libs/ell and sys-apps/keyutils require CONFIG_KEY_DH_OPERATIONS"
echo "  Security options > Enable access key retention support > Diffie-Hellman operations on retained keys"
echo 'CONFIG_KEY_DH_OPERATIONS=y' >>.config
echo "media-libs/mesa requires CONFIG_CHECKPOINT_RESTORE"
echo "  General setup > Checkpoint/restore support"
echo 'CONFIG_CHECKPOINT_RESTORE=y' >>.config
echo "www-client/google-chrome requires CONFIG_USER_NS"
echo "  General setup > Namespaces support > User namespace"
echo 'CONFIG_USER_NS=y' >>.config

echo "Disable SELinux"
echo "  Security options > NSA SELinux Support"
echo 'CONFIG_SECURITY_SELINUX=n' >>.config

kernelseeds_quiet make olddefconfig

unset ARCH
if $TMPFS; then
	umount "$TMP"
fi
rm -rf --one-file-system "$TMP"
